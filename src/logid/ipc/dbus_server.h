
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx____server_h__ADAPTOR_MARSHAL_H
#define __dbusxx____server_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace io {
namespace github {
namespace pixlone {
namespace LogiOps {

class Control_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Control_adaptor()
    : ::DBus::InterfaceAdaptor("io.github.pixlone.LogiOps.Control")
    {
        bind_property(Version, "s", true, false);
        register_method(Control_adaptor, Reload, _Reload_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Reload_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Control_adaptor_methods[] = 
        {
            { "Reload", Reload_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Control_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Control_adaptor_properties[] = 
        {
            { "Version", "s", true, false },
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Control_adaptor_interface = 
        {
            "io.github.pixlone.LogiOps.Control",
            Control_adaptor_methods,
            Control_adaptor_signals,
            Control_adaptor_properties
        };
        return &Control_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */
    ::DBus::PropertyAdaptor< std::string > Version;

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void Reload() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Reload_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Reload();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

class Socket_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Socket_adaptor()
    : ::DBus::InterfaceAdaptor("io.github.pixlone.LogiOps.Socket")
    {
        register_method(Socket_adaptor, Establish, _Establish_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const
    {
        static ::DBus::IntrospectedArgument Establish_args[] =
        {
            { "fd", "x", true },
            { "ret", "x", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Socket_adaptor_methods[] =
        {
            { "Establish", Establish_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Socket_adaptor_signals[] =
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Socket_adaptor_properties[] =
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Socket_adaptor_interface =
        {
            "io.github.pixlone.LogiOps.Socket",
            Socket_adaptor_methods,
            Socket_adaptor_signals,
            Socket_adaptor_properties
        };
        return &Socket_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int64_t Establish(const int64_t& fd) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Establish_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int64_t argin1; ri >> argin1;
        int64_t argout1 = Establish(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

class Config_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Config_adaptor()
    : ::DBus::InterfaceAdaptor("io.github.pixlone.LogiOps.Config")
    {
        register_method(Config_adaptor, Get, _Get_stub);
        register_method(Config_adaptor, GetAll, _GetAll_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const
    {
        static ::DBus::IntrospectedArgument Get_args[] =
        {
            { "device", "s", true },
            { "property", "s", true },
            { "value", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetAll_args[] =
        {
            { "device", "s", true },
            { "properties", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Config_adaptor_methods[] =
        {
            { "Get", Get_args },
            { "GetAll", GetAll_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Config_adaptor_signals[] =
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Config_adaptor_properties[] =
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Config_adaptor_interface =
        {
            "io.github.pixlone.LogiOps.Config",
            Config_adaptor_methods,
            Config_adaptor_signals,
            Config_adaptor_properties
        };
        return &Config_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string Get(const std::string& device, const std::string& property) = 0;
    virtual std::vector< std::string > GetAll(const std::string& device) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Get_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        std::string argout1 = Get(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetAll_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = GetAll(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

class Device_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Device_adaptor()
    : ::DBus::InterfaceAdaptor("io.github.pixlone.LogiOps.Device")
    {
        register_method(Device_adaptor, List, _List_stub);
        register_method(Device_adaptor, Get, _Get_stub);
        register_method(Device_adaptor, Features, _Features_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const
    {
        static ::DBus::IntrospectedArgument List_args[] =
        {
            { "devices", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Get_args[] =
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Features_args[] =
        {
            { "device", "s", true },
            { "features", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Device_adaptor_methods[] =
        {
            { "List", List_args },
            { "Get", Get_args },
            { "Features", Features_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Device_adaptor_signals[] =
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Device_adaptor_properties[] =
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Device_adaptor_interface =
        {
            "io.github.pixlone.LogiOps.Device",
            Device_adaptor_methods,
            Device_adaptor_signals,
            Device_adaptor_properties
        };
        return &Device_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< std::string > List() = 0;
    virtual void Get() = 0;
    virtual std::vector< std::string > Features(const std::string& device) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _List_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = List();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Get_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Get();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Features_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = Features(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

class Receiver_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Receiver_adaptor()
    : ::DBus::InterfaceAdaptor("io.github.pixlone.LogiOps.Receiver")
    {
        register_method(Receiver_adaptor, List, _List_stub);
        register_method(Receiver_adaptor, ListDevices, _ListDevices_stub);
        register_method(Receiver_adaptor, Pair, _Pair_stub);
        register_method(Receiver_adaptor, Unpair, _Unpair_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument List_args[] = 
        {
            { "receivers", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ListDevices_args[] = 
        {
            { "receiver", "s", true },
            { "devices", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Pair_args[] = 
        {
            { "receiver", "s", true },
            { "status", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Unpair_args[] = 
        {
            { "receiver", "s", true },
            { "device_index", "i", true },
            { "status", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Receiver_adaptor_methods[] = 
        {
            { "List", List_args },
            { "ListDevices", ListDevices_args },
            { "Pair", Pair_args },
            { "Unpair", Unpair_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Receiver_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Receiver_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Receiver_adaptor_interface = 
        {
            "io.github.pixlone.LogiOps.Receiver",
            Receiver_adaptor_methods,
            Receiver_adaptor_signals,
            Receiver_adaptor_properties
        };
        return &Receiver_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< std::string > List() = 0;
    virtual std::vector< std::string > ListDevices(const std::string& receiver) = 0;
    virtual int32_t Pair(const std::string& receiver) = 0;
    virtual std::string Unpair(const std::string& receiver, const int32_t& device_index) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _List_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = List();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ListDevices_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = ListDevices(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Pair_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argout1 = Pair(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Unpair_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        std::string argout1 = Unpair(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } } 
#endif //__dbusxx____server_h__ADAPTOR_MARSHAL_H
