
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbus_client_h__PROXY_MARSHAL_H
#define __dbusxx__dbus_client_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace pizza {
namespace pixl {

class logiops_proxy
: public ::DBus::InterfaceProxy
{
public:

    logiops_proxy()
    : ::DBus::InterfaceProxy("pizza.pixl.logiops")
    {
    }

public:

    /* properties exported by this interface */
        const std::string Version() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops";
            const std::string property_name  = "Version";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::vector< std::string > Receivers() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops";
            const std::string property_name  = "Receivers";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::vector< std::string > Devices() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops";
            const std::string property_name  = "Devices";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Reload()
    {
        ::DBus::CallMessage call;
        call.member("Reload");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

namespace logiops {

class DeviceManager_proxy
: public ::DBus::InterfaceProxy
{
public:

    DeviceManager_proxy()
    : ::DBus::InterfaceProxy("pizza.pixl.logiops.DeviceManager")
    {
        connect_signal(DeviceManager_proxy, DeviceConnected, _DeviceConnected_stub);
        connect_signal(DeviceManager_proxy, DeviceDisconnected, _DeviceDisconnected_stub);
        connect_signal(DeviceManager_proxy, ReceiverConnected, _ReceiverConnected_stub);
        connect_signal(DeviceManager_proxy, ReceiverDisconnected, _ReceiverDisconnected_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ReloadDevice()
    {
        ::DBus::CallMessage call;
        call.member("ReloadDevice");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void DeviceConnected(const std::string& device) = 0;
    virtual void DeviceDisconnected(const std::string& device) = 0;
    virtual void ReceiverConnected(const std::string& receiver) = 0;
    virtual void ReceiverDisconnected(const std::string& receiver) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DeviceConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string device;
        ri >> device;
        DeviceConnected(device);
    }
    void _DeviceDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string device;
        ri >> device;
        DeviceDisconnected(device);
    }
    void _ReceiverConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string receiver;
        ri >> receiver;
        ReceiverConnected(receiver);
    }
    void _ReceiverDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string receiver;
        ri >> receiver;
        ReceiverDisconnected(receiver);
    }
};

class Config_proxy
: public ::DBus::InterfaceProxy
{
public:

    Config_proxy()
    : ::DBus::InterfaceProxy("pizza.pixl.logiops.Config")
    {
    }

public:

    /* properties exported by this interface */
        const std::vector< std::string > Devices() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Config";
            const std::string property_name  = "Devices";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Variant Get()
    {
        ::DBus::CallMessage call;
        call.member("Get");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    std::map< std::string, ::DBus::Variant > GetAll()
    {
        ::DBus::CallMessage call;
        call.member("GetAll");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void ReloadAll()
    {
        ::DBus::CallMessage call;
        call.member("ReloadAll");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReloadDevice()
    {
        ::DBus::CallMessage call;
        call.member("ReloadDevice");
        ::DBus::Message ret = invoke_method (call);
    }

    void SaveAll()
    {
        ::DBus::CallMessage call;
        call.member("SaveAll");
        ::DBus::Message ret = invoke_method (call);
    }

    void SaveDevice()
    {
        ::DBus::CallMessage call;
        call.member("SaveDevice");
        ::DBus::Message ret = invoke_method (call);
    }

    void ClearAll()
    {
        ::DBus::CallMessage call;
        call.member("ClearAll");
        ::DBus::Message ret = invoke_method (call);
    }

    void Clear()
    {
        ::DBus::CallMessage call;
        call.member("Clear");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

class Device_proxy
: public ::DBus::InterfaceProxy
{
public:

    Device_proxy()
    : ::DBus::InterfaceProxy("pizza.pixl.logiops.Device")
    {
    }

public:

    /* properties exported by this interface */
        const std::string Name() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Device";
            const std::string property_name  = "Name";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const uint16_t DeviceID() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Device";
            const std::string property_name  = "DeviceID";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const std::vector< std::string > Features() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Device";
            const std::string property_name  = "Features";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetInfo");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

class Receiver_proxy
: public ::DBus::InterfaceProxy
{
public:

    Receiver_proxy()
    : ::DBus::InterfaceProxy("pizza.pixl.logiops.Receiver")
    {
    }

public:

    /* properties exported by this interface */
        const std::vector< std::string > Devices() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Receiver";
            const std::string property_name  = "Devices";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string Pair()
    {
        ::DBus::CallMessage call;
        call.member("Pair");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void Unpair()
    {
        ::DBus::CallMessage call;
        call.member("Unpair");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

namespace Device {

class Button_proxy
: public ::DBus::InterfaceProxy
{
public:

    Button_proxy()
    : ::DBus::InterfaceProxy("pizza.pixl.logiops.Device.Button")
    {
    }

public:

    /* properties exported by this interface */
        const bool Diverted() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Device.Button";
            const std::string property_name  = "Diverted";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        void Diverted( const bool & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "pizza.pixl.logiops.Device.Button";
            const std::string property_name  = "Diverted";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const std::string ActionType() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Device.Button";
            const std::string property_name  = "ActionType";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        void ActionType( const std::string & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "pizza.pixl.logiops.Device.Button";
            const std::string property_name  = "ActionType";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const std::map< std::string, ::DBus::Variant > Action() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "pizza.pixl.logiops.Device.Button";
            const std::string property_name  = "Action";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        void Action( const std::map< std::string, ::DBus::Variant > & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "pizza.pixl.logiops.Device.Button";
            const std::string property_name  = "Action";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */

public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } }
#endif //__dbusxx__dbus_client_h__PROXY_MARSHAL_H
