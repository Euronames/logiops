
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__src_liblogiops_dbus_client_h__PROXY_MARSHAL_H
#define __dbusxx__src_liblogiops_dbus_client_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace io {
namespace github {
namespace pixlone {
namespace LogiOps {

class Control_proxy
: public ::DBus::InterfaceProxy
{
public:

    Control_proxy()
    : ::DBus::InterfaceProxy("io.github.pixlone.LogiOps.Control")
    {
    }

public:

    /* properties exported by this interface */
        const std::string Version() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "io.github.pixlone.LogiOps.Control";
            const std::string property_name  = "Version";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Reload()
    {
        ::DBus::CallMessage call;
        call.member("Reload");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

class Socket_proxy
: public ::DBus::InterfaceProxy
{
public:

    Socket_proxy()
    : ::DBus::InterfaceProxy("io.github.pixlone.LogiOps.Socket")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int64_t Establish(const int64_t& fd)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fd;
        call.member("Establish");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int64_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

class Config_proxy
: public ::DBus::InterfaceProxy
{
public:

    Config_proxy()
    : ::DBus::InterfaceProxy("io.github.pixlone.LogiOps.Config")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string Get(const std::string& device, const std::string& property)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        wi << property;
        call.member("Get");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > GetAll(const std::string& device)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("GetAll");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

class Device_proxy
: public ::DBus::InterfaceProxy
{
public:

    Device_proxy()
    : ::DBus::InterfaceProxy("io.github.pixlone.LogiOps.Device")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< std::string > List()
    {
        ::DBus::CallMessage call;
        call.member("List");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    void Get()
    {
        ::DBus::CallMessage call;
        call.member("Get");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< std::string > Features(const std::string& device)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("Features");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

class Receiver_proxy
: public ::DBus::InterfaceProxy
{
public:

    Receiver_proxy()
    : ::DBus::InterfaceProxy("io.github.pixlone.LogiOps.Receiver")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< std::string > List()
    {
        ::DBus::CallMessage call;
        call.member("List");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > ListDevices(const std::string& receiver)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << receiver;
        call.member("ListDevices");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    int32_t Pair(const std::string& receiver)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << receiver;
        call.member("Pair");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::string Unpair(const std::string& receiver, const int32_t& device_index)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << receiver;
        wi << device_index;
        call.member("Unpair");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
#endif //__dbusxx__src_liblogiops_dbus_client_h__PROXY_MARSHAL_H
